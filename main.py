import logging
import asyncio
from typing import Any
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardMarkup
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import datetime
import time
import sys
import pyowm
from pyowm.utils.config import get_default_config
import requests
from bs4 import BeautifulSoup
from translate import Translator


from config import TOKEN, TOKEN_OWM, admin, output_day, new_employee, route_30_home_weekdays, route_30_city_weekdays, route_30a_home_weekdays, route_30a_city_weekdays,route_47_home_weekdays,route_47_city_weekdays,route_30_home_saturday,route_30_city_saturday,route_30a_home_saturday,route_30a_city_saturday,route_47_home_saturday, route_47_city_saturday, route_30_home_sunday, route_30_home_sunday,route_30a_home_sunday, route_30a_city_sunday, route_47_home_sunday, route_47_city_sunday, path_to_log
from key import markup_main, markup_admin, markup_zodiac_ru, markup_zodiac_en

while True:
    try:
        owm = pyowm.OWM(TOKEN_OWM)
        form_router = Router()
        TOKEN = TOKEN
        dp = Dispatcher(storage=MemoryStorage())
        logger = logging.getLogger(__name__)

        class Form(StatesGroup):
            Text_employee = State()


        async def get_horoscope_by_day(zodiac_sign: int, flag, message):
            res = requests.get(f"https://www.horoscope.com/us/horoscopes/general/horoscope-archive.aspx?sign={zodiac_sign}&laDate=")
            soup = BeautifulSoup(res.content, 'html.parser')
            data = soup.find('div', attrs={'class': 'main-horoscope'})
            translator = Translator(from_lang='en', to_lang='ru')
            if flag == 'ru':
                return translator.translate(str(data.p.text))
            else:
                return data.p.text

        #–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async def logir(function,start_time,message):
            f = open(path_to_log,'a')
            f.write(f'{datetime.datetime.now().date().strftime("%d.%m.%y")};{datetime.datetime.now().time().strftime("%H:%M")};{message.from_user.id};{function};{str(time.time() - start_time)[0:5]}\n')
            f.close()
        #–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏
        async def log_file(message):
            start_time = time.time()
            await message.answer_document(FSInputFile(path_to_log))
            await logir('log_file',start_time,message)
        #–ß—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
        async def not_sleep(message: Message):
            flag = True
            while flag:
                employee = f'\n'
                for i in new_employee:
                    employee = f'{employee}{i}\n'
                await message.answer(f'{message.from_user.id}, —è –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é))\n–ö–æ–ª-–≤–æ —É—Å–ª–æ–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(new_employee)}\n{50*"-"}\n–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {employee}')
                await asyncio.sleep(450)

        async def weather(message: Message):
            try:
                start_time = time.time()
                config_dict = get_default_config()
                config_dict['language'] = 'RU'
                mgr = owm.weather_manager()
                observation = mgr.weather_at_place('–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª')
                w = observation.weather
                temp = w.temperature('celsius')['temp']
                Wind = w.wind()
                # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –≥–æ—Å—Ç—É
                effective_temp = 13.12 + 0.6215 * temp - 11.37 * ((1.5 * Wind["speed"]) ** 0.16) + 0.3965 * temp * ((1.5 * Wind["speed"]) ** 0.16)
                effective_temp = round(effective_temp, 1)
                Feeling_weather = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(effective_temp) + '¬∞C'
                await message.answer('–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å ' + str(w.detailed_status) + '\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ —Ä–∞–π–æ–Ω–µ ' + str(
                    int(temp)) + ' ¬∞C\n' + 'üå¨–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ = ' + str(Wind['speed']) + ' –º/—Å\n' + str(Feeling_weather))
                await logir('weather', start_time, message)
            except:
                await message.answer('–ù–µ—Ç —Å–≤—è–∑–∏ —Å –ø–æ–≥–æ–¥–æ–π!')

        #–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        async def current_datetime_today(message: Message):
            start_time = time.time()
            current = datetime.datetime.now()
            current_date = current.strftime("%d.%m.%y")
            current_time = current.strftime("%H:%M")
            current_day = current.isocalendar()[2]
            current_second = 3600*int(current.strftime("%H"))+60*int(current.strftime("%M"))
            await logir('current_datetime_today', start_time, message)
            return current_date, current_time, current_day, current_second


        #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–π—Å–∞
        async def flight(route, current_second, flag, message: Message):
            start_time = time.time()
            route_array = []
            for i in route:
                if flag == 'previous':
                    sing = '<'
                else:
                    sing = '>='
                if eval(f'{i} {sing} {current_second}'):
                    route_array.append(i)
            await logir('flight', start_time, message)
            if len(route_array) > 0 and (flag == 'previous' or flag == 'current'):
                return datetime.timedelta(seconds = route_array[-1])
            elif flag == 'next' and len(route) <= len(route_array)+1:
                return datetime.timedelta(seconds = route[len(route_array)+1])
            else:
                return '–ö–æ–Ω–µ—Ü'


        #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ö —Ä–µ–π—Å–æ–≤
        async def schedule_route(route, message: Message):
            start_time = time.time()
            current_datetime = await current_datetime_today(message)
            previous_route = await flight(route, current_datetime[3],'previous', message)
            current_route = await flight(route, current_datetime[3],'current', message)
            next_route = await flight(route, current_datetime[3],'next', message)
            await logir('schedule_route', start_time, message)
            return previous_route, current_route, next_route


        #–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        async def display_schedule_route(route, message: Message):
            start_time = time.time()
            current_datetime = await current_datetime_today(message)
            if current_datetime[2] != 6 and current_datetime[2] != 7 and current_datetime[0] not in output_day:
                week = 'weekdays'
            elif current_datetime[2] == 6 and current_datetime[0] not in output_day:
                week = 'saturday'
            else:
                week = 'sunday'
            M30 = await schedule_route(globals().get(f'route_30_{route}_{week}'), message)
            M30a = await schedule_route(globals().get(f'route_30a_{route}_{week}'), message)
            M47 = await schedule_route(globals().get(f'route_47_{route}_{week}'), message)
            if route == 'city':
                await message.answer(f'<b>üöÇ –° –ñ–î –≤–æ–∫–∑–∞–ª–∞:</b>\n<b>üöå –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ30\n<b>üîô–ü—Ä–µ–¥—ã–¥—É—â–∏–π -</b>{str(M30[0])[:5]} \n <b>‚åö –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M30[1])[:5]}\n<b>üîú–°–ª–µ–¥—É—é—â–∏–π - </b>{str(M30[2])[:5]}\n\n<b>üöé –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ30A\n<b>üîô–ü—Ä–µ–¥—ã–¥—É—â–∏–π -</b>{str(M30a[0])[:5]} \n <b>‚åö –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M30a[1])[:5]}\n<b>üîú–°–ª–µ–¥—É—é—â–∏–π -</b> {str(M30a[2])[:5]} \n\n<b>üè™ –° C–ø—É—Ç–Ω–∏–∫–∞:</b>   '
                                                 f'\n<b>üöç –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ47\n<b>üîô–ü—Ä–µ–¥—ã–¥—É—â–∏–π -</b>{str(M47[0])[:5]} \n<b>‚åö –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M47[1])[:5]}\n<b>üîú–°–ª–µ–¥—É—é—â–∏–π - </b>{str(M47[2])[:5]} ',
                                                 parse_mode='html')
            else:
                await message.answer(f'<b>üèõ –° –∫–∞—à—Ç–∞–Ω–æ–≤–æ–π:</b>\n<b>üöå –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ30\n<b>‚åöÔ∏è–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M30[1])[:5]}\n<b>üîú–°–ª–µ–¥—É—é—â–∏–π -</b> {str(M30[2])[:5]}\n\n<b>üöé –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ30A\n<b>‚åöÔ∏è–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M30a[1])[:5]}\n<b>üîú–°–ª–µ–¥—É—é—â–∏–π -</b> {str(M30a[2])[:5]}\n'
                                                 f'\n<b>üöé –ê–≤—Ç–æ–±—É—Å</b> ‚Ññ47\n<b>‚åöÔ∏è–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> - {str(M47[1])[:5]} \n<b>üîú–°–ª–µ–¥—É—é—â–∏–π -</b> {str(M47[2])[:5]}',
                                                 parse_mode='html')
            await logir('display_schedule_route',start_time, message)

        async def delivery_sms(id_recipient,id_sunder,text,message: Message):
            start_time = time.time()
            bot = Bot(TOKEN, parse_mode = "html")
            await bot.send_message(id_recipient, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {id_sunder}\n–¢–µ—Ö—Ç: {text}', reply_markup = markup_main)
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
            await bot.session.close()
            await logir('delivery_sms',start_time, message)


        @form_router.callback_query(lambda c: c.data)
        async def call_handle(call: types.callback_query, state: FSMContext) -> None:
            if int(call.data) < 14 :
                await call.message.edit_text(await get_horoscope_by_day(call.data, 'ru' ,call))
            else:
                zod = int(call.data) - 100
                print(call.data)
                await call.message.edit_text(await get_horoscope_by_day(zod, 'en', call))

        @form_router.message(Form.Text_employee)
        async def help_text(message: Message, state: FSMContext):
            start_time = time.time()
            try:
                text = message.text.split(',')
            except:
                await state.clear()
                await message.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞.')
            id = message.from_user.id
            if id in admin:
                await delivery_sms(text[0],admin[0],text[1],message)
            else:
                await delivery_sms(admin[0],id,text,message)
            await logir('help_text',start_time, message)

        @form_router.message(commands={"cancel"})
        @form_router.message(F.text.casefold() == "cancel")
        async def cancel_handler(message: Message, state: FSMContext) -> None:
            """
            Allow user to cancel any action
            """
            current_state = await state.get_state()
            if current_state is None:
                return

            logging.info("Cancelling state %r", current_state)
            await state.clear()
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=markup_main,
            )

        #–ü–æ–¥–¥–µ—Ä–∂–∫–∞
        @form_router.message(commands={"help"})
        async def help_user(message: Message, state: FSMContext):
            start_time = time.time()
            await state.set_state(Form.Text_employee)
            await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —Ç–æ –≤–≤–µ–¥–∏ /cancel',reply_markup = markup_main)
            await logir('help_user',start_time, message)

        #–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω
        @form_router.message(commands={"admin"})
        async def key(message: Message):
            start_time = time.time()
            await message.answer('–¢—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup = markup_admin)
            await logir('admin',start_time, message)

        #–ü–æ—á–∏–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        @form_router.message(commands={"key"})
        async def key(message: Message):
            start_time = time.time()
            await message.answer('–Ø –ø–æ—á–∏–Ω–∏–ª—å',reply_markup = markup_main)
            await logir('key',start_time, message)

        #–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        @form_router.message(commands={"start"})
        async def start(message: Message):
            start_time = time.time()
            new_employee.append(f'{message.from_user.id}')
            await message.reply_sticker("CAACAgIAAxkBAAEOeXNiI10x4eG7LXSdRWogN8wTp5ezdAAC_RIAAk89GEvo1GtuJXMfbyME")
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π. –ö—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è? –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. \n–ï—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∫–ª–∞–≤–∏—Ç–∞—Ä—É–∞ —Å–ª–æ–º–∞–µ—Ç—Å—è, —Ç–æ –≤–≤–µ–¥–∏ /key\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç–æ –≤–≤–µ–¥–∏ /help',reply_markup = markup_main)
            await logir('start',start_time, message)

        @form_router.message(content_types=['text'])
        async def text_button(message: Message, state: FSMContext):
            if message.text == 'üè´ –í –≥–æ—Ä–æ–¥':
                start_time = time.time()
                await display_schedule_route('home',message)
                await logir('–î–æ–º–æ–π',start_time, message)
            elif message.text == 'üè† –î–æ–º–æ–π':
                start_time = time.time()
                await display_schedule_route('city',message)
                await logir('–í –≥–æ—Ä–æ–¥–µ',start_time, message)
            elif message.text == '–ì–û':
                await not_sleep(message)
            elif message.text == 'Hi':
                await state.set_state(Form.Text_employee)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ id –∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: 11, –ü—Ä–∏–≤–µ—Ç')
            elif message.text == '‚õÖ –ü–æ–≥–æ–¥–∞':
                await weather(message)
            elif message.text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø':
                await message.answer('–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (RU).\n–ù–∞–∂–º–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∂–¥–∏!', reply_markup = markup_zodiac_ru)
                await message.answer('–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (EN).\n–ù–∞–∂–º–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∂–¥–∏!', reply_markup= markup_zodiac_en)
            elif message.text == path_to_log:
                await log_file(message)
            else:
                await message.answer('–ù–µ –ø–æ–Ω–∏–º–∞—Ç—å((')


        def main() -> None:
            dp.include_router(form_router)
            bot = Bot(TOKEN, parse_mode="html")
            # And the run events dispatching
            dp.run_polling(bot)


        if __name__ == "__main__":
            logging.basicConfig(level=logging.INFO, stream=sys.stdout)
            asyncio.run(main())
    except:
        pass
